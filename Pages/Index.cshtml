@page
@model IndexModel
@{
    ViewData["Title"] = "Power BI Report";
}

<div class="container-fluid px-4 py-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-white">
                    <h4 class="mb-0">
                        <i class="bi bi-bar-chart-fill text-primary me-2"></i>Power BI Report
                    </h4>
                </div>
                <div class="card-body p-0" style="min-height: 70vh;">
                    <iframe 
                        id="reportContainer" 
                        class="w-100 h-100" 
                        style="min-height: 600px; border: none;"
                        src="https://app.powerbi.com/reportEmbed?reportId=7199a5be-4f2e-4cf0-a2ef-70141050de11&autoAuth=true&ctid=31996441-7546-4120-826b-df0c3e239671"
                        frameborder="0"
                        allowFullScreen="true">
                    </iframe>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        #reportContainer {
            height: 70vh;
            min-height: 500px;
        }
        
        .report-loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
            background-color: #f8f9fa;
        }
        
        .error-message {
            padding: 20px;
            margin: 20px;
            border-radius: 4px;
        }
    </style>
}

@section Scripts {
    <script>
        // Global variables
        let report = null;
        
        // Wait for the page to load
        document.addEventListener('DOMContentLoaded', function() {
            // Load the Power BI report
            loadReport();
            
            // Handle window resize to adjust the report size
            window.addEventListener('resize', debounce(handleResize, 300));
        });
        
        // Function to load the Power BI report
        async function loadReport() {
            const embedContainer = document.getElementById('reportContainer');
            
            try {
                // Show loading state
                showLoading(embedContainer);
                
                // Get the embed configuration from the API
                const response = await fetch('/api/embed/config');
                
                if (!response.ok) {
                    const error = await response.json().catch(() => ({}));
                    throw new Error(error.details || 'Failed to load report configuration');
                }
                
                const config = await response.json();
                console.log('Embed config:', config);
                
                // Check if we have the required configuration
                if (!config.embedUrl || !config.reportId) {
                    throw new Error('Invalid report configuration: Missing required parameters');
                }
                
                // Get the models object from the powerbi-client package
                const models = window['powerbi-client'].models;
                
                // Create the embed configuration
                const embedConfig = {
                    type: 'report',
                    embedUrl: config.embedUrl,
                    tokenType: 5, // 5 = AAD token for public embedding
                    settings: {
                        // Use settings from config or default values
                        panes: config.settings?.panes || {
                            filters: { expanded: false, visible: false },
                            pageNavigation: { visible: true }
                        },
                        background: models.BackgroundType.Transparent,
                        layoutType: models.LayoutType.Custom,
                        // Enable auto-authentication if configured
                        filterPaneEnabled: false,
                        navContentPaneEnabled: true
                    }
                };
                
                console.log('Embedding report with config:', embedConfig);
                
                console.log('Embedding report with config:', embedConfig);
                
                // Embed the report
                report = powerbi.embed(embedContainer, embedConfig);
                
                // Handle report loaded event
                report.on('loaded', function() {
                    console.log('Report loaded successfully');
                    // Report loaded successfully, no need to do anything else
                });
                
                // Handle errors
                report.on('error', function(event) {
                    console.error('Power BI error:', event.detail);
                    showError(embedContainer, event.detail.message || 'An error occurred while loading the report.');
                });
                
            } catch (error) {
                console.error('Error loading report:', error);
                showError(embedContainer, error.message || 'An unexpected error occurred.');
            }
        }
        
        // Show loading state
        function showLoading(container) {
            if (!container) return;
            
            container.innerHTML = `
                <div class="report-loading">
                    <div class="text-center">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted">Loading Power BI report...</p>
                    </div>
                </div>`;
        }
        
        // Show error message
        function showError(container, message) {
            if (!container) return;
            
            container.innerHTML = `
                <div class="alert alert-danger error-message">
                    <h5 class="alert-heading">Error Loading Report</h5>
                    <p class="mb-0">${message}</p>
                    <hr>
                    <button class="btn btn-sm btn-outline-secondary mt-2" onclick="window.location.reload()">
                        <i class="bi bi-arrow-clockwise me-1"></i> Try Again
                    </button>
                </div>`;
        }
        
        // Handle window resize with debounce
        function handleResize() {
            if (report) {
                report.reload();
            }
        }
        
        // Simple debounce function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
    </script>
}
